{"version":3,"sources":["components/Photo/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Photo","props","react_default","a","createElement","className","onClick","id","alt","name","src","image","Navbar","console","log","message","score","topscore","App","state","photos","previousIDsClicked","shuffleArray","data","sort","b","Math","random","handleClick","_this","includes","setState","concat","Object","toConsumableArray","_this2","this","components_Navbar","map","photo","components_Photo","clickPhoto","clicked","key","timesClicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"03BAgBeA,MAbf,SAAeC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,QAAS,kBAAML,EAAMK,QAAQL,EAAMM,MAE1DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,kBCa5BC,MAnBf,SAAgBX,GAEd,OADAY,QAAQC,IAAIb,GAEVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eAGAH,EAAAC,EAAAC,cAAA,UAAKH,EAAMc,SACXb,EAAAC,EAAAC,cAAA,oBAAYH,EAAMe,MAAlB,iBAAuCf,EAAMgB,oBC4EtCC,oNAhFbC,MAAQ,CACNC,SACAJ,MAAO,EACPC,SAAU,EACVI,mBAAoB,GACpBN,QAAS,6BAGXO,aAAe,SAAAC,GAIb,OAHeA,EAAKC,KAAK,SAASrB,EAAGsB,GACnC,MAAO,GAAMC,KAAKC,cAKtBC,YAAc,SAAArB,GAGRsB,EAAKV,MAAME,mBAAmBS,SAASvB,IACzCsB,EAAKE,SAAS,CAAEf,MAAO,IACvBa,EAAKE,SAAS,CAAEV,mBAAoB,KAGpCQ,EAAKE,SAAS,CAAEhB,QAAS,+BAIzBc,EAAKE,SAAS,CACZV,mBAAkB,GAAAW,OAAAC,OAAAC,EAAA,EAAAD,CAAMJ,EAAKV,MAAME,oBAAjB,CAAqCd,IACvDQ,QAAS,2BAIXc,EAAKE,SAAS,CAAEf,MAAOa,EAAKV,MAAMH,MAAQ,IAEtCa,EAAKV,MAAMH,QAAUa,EAAKV,MAAMF,UAClCY,EAAKE,SAAS,CAAEd,SAAUY,EAAKV,MAAMF,SAAW,IAMlDY,EAAKP,aAAaF,6EAKb,IAAAe,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAEXH,EAAAC,EAAAC,cAACiC,EAAD,CAAQtB,QAASqB,KAAKjB,MAAMJ,QAASC,MAAOoB,KAAKjB,MAAMH,MAAOC,SAAUmB,KAAKjB,MAAMF,WACnFf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,gBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,6EAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZ+B,KAAKjB,MAAMC,OAAOkB,IAAI,SAAAC,GAAK,OAC1BrC,EAAAC,EAAAC,cAACoC,EAAD,CACElC,QAAS6B,EAAKP,YACda,WAAYN,EAAKO,QACjBnC,GAAIgC,EAAMhC,GACVoC,IAAKJ,EAAMhC,GACXI,MAAO4B,EAAM5B,MACbiC,aAAcT,EAAKhB,MAAMyB,mBAK/B1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAAf,8BA1EMwC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff8f1eb5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Photo(props) {\n  return (\n    <div className=\"mx-auto\" onClick={() => props.onClick(props.id)}>\n    {/* <div style={{ flex: \"1\" }} onClick={() => props.onClick(props.id)}> */}\n      <div className=\"card\">\n        <div className=\"img-fluid\">\n          <img alt={props.name} src={props.image} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Photo;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  console.log(props)\n  return (\n    <div className=\"navbar p-0\">\n      <ul>\n        <li className=\"brand\">\n          Clicky Game\n      </li>\n        <li>{props.message}</li>\n        <li>Score: {props.score} | Top Score: {props.topscore}</li>\n      </ul>\n\n\n\n    </div>\n\n  );\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport PhotoCard from \"./components/Photo\";\n// import Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport photos from \"./photos.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    photos,\n    score: 0,\n    topscore: 0,\n    previousIDsClicked: [],\n    message: \"Click an image to begin\"\n  };\n\n  shuffleArray = data => {\n    let newArray = data.sort(function(a, b) {\n      return 0.5 - Math.random();\n    });\n    return newArray;\n  };\n\n  handleClick = id => {\n    // console.log(id);\n    //if previous IDS clicked contains ID\n    if (this.state.previousIDsClicked.includes(id)) {\n      this.setState({ score: 0 });\n      this.setState({ previousIDsClicked: [] });\n\n      // alert user game over\n      this.setState({ message: \"You guessed incorrectly!\" })\n    }\n    // else add to array of previous IDs clicked\n    else {\n      this.setState({\n        previousIDsClicked: [...this.state.previousIDsClicked, id],\n        message: \"You guessed correctly!\"\n      });\n\n      // increase score\n      this.setState({ score: this.state.score + 1 });\n\n      if (this.state.score === this.state.topscore) {\n        this.setState({ topscore: this.state.topscore + 1})\n        \n      }\n      // increase topscore\n\n      // shuffle images\n      this.shuffleArray(photos);\n    }\n\n  };\n\n  render() {\n    return (\n      <div className=\"container col-12 m-0 p-0\">\n\n          <Navbar message={this.state.message} score={this.state.score} topscore={this.state.topscore} />\n          <div className=\"spacer\"></div>\n          <div className=\"jumbotron p-5\">\n            <h1 className=\"display-4 text-center\">Clicky Game!</h1>\n            <p className=\"text-center\">Click on an image to earn points, but don't click on any more than once!</p>\n          </div>\n          {/* {console.log(this.state)} */}\n        <div className=\"row\">\n          <div className=\"col-11 mx-auto\">\n            <div className=\"wrapper mx-auto\">\n              {this.state.photos.map(photo => (\n                <PhotoCard\n                  onClick={this.handleClick}\n                  clickPhoto={this.clicked}\n                  id={photo.id}\n                  key={photo.id}\n                  image={photo.image}\n                  timesClicked={this.state.timesClicked}\n                />\n              ))}\n            </div>\n          </div>\n            <div className=\"footer col-12 mt-4 pl-5 p-4\">Clicky Game React</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}